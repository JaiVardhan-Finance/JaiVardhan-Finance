import warnings
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
movies = pd.read_csv("MovieData.csv")
movies
movies.shape
type(movies)
movies.columns
# Write your code for column-wise null count here
movies.isnull()
# Write your code for row-wise null count here
movies.isnull().sum(axis=1)
# Write your code for column-wise null percentages here
movies.isnull().mean()*100
movies.drop(["color","director_facebook_likes","actor_1_facebook_likes","actor_2_facebook_likes","actor_3_facebook_likes","actor_2_name","cast_total_facebook_likes","actor_3_name","duration","facenumber_in_poster","content_rating","country","movie_imdb_link","aspect_ratio","plot_keywords"],axis =1)
movies.drop(["color","director_facebook_likes","actor_1_facebook_likes","actor_2_facebook_likes","actor_3_facebook_likes","actor_2_name","cast_total_facebook_likes","actor_3_name","duration","facenumber_in_poster","content_rating","country","movie_imdb_link","aspect_ratio","plot_keywords"],axis =1)
# Write your code for dropping the rows here
Fresh_movies = movies.dropna(thresh=len(movies.columns) - 5)
Fresh_movies
# Write your code for dropping the rows here
fresh_movies = movies.dropna(thresh=len(movies.columns) - 5)
fresh_movies
# Write your code for filling the NaN values in the 'language' column here
fresh_movies.loc[:, 'language'] = fresh_movies['language'].fillna('English')
fresh_movies
# Write your code for checking number of retained rows here
fresh_movies.shape
# Write your code for unit conversion here
fresh_movies.loc[:,'budget'] = fresh_movies['budget'] / 1_000_000
fresh_movies.loc[:,'gross'] = fresh_movies['gross'] / 1_000_000
fresh_movies
print(fresh_movies[['budget', 'gross']].dtypes)
fresh_movies.loc[:, 'budget'] = pd.to_numeric(fresh_movies['budget'], errors='coerce')
fresh_movies.loc[:, 'gross'] = pd.to_numeric(fresh_movies['gross'], errors='coerce')
fresh_movies = fresh_movies.dropna(subset=['budget', 'gross'])
# Write your code for creating the profit column here
fresh_movies['profit'] = fresh_movies['gross'] - fresh_movies['budget']
# Write your code for sorting the dataframe here
fresh_movies.sort_values(by="profit", ascending=False, inplace=True)
top10 = top_10_profiting_movies = fresh_movies.nlargest(10, 'profit')
top10
# Write your code for dropping duplicate values here
fresh_movies.drop_duplicates(inplace=True)
fresh_movies
# Write code for repeating subtask 2 here
fresh_movies.loc[:, 'budget'] = pd.to_numeric(fresh_movies['budget'], errors='coerce')
fresh_movies.loc[:, 'gross'] = pd.to_numeric(fresh_movies['gross'], errors='coerce')

fresh_movies['profit'] = fresh_movies['gross'] - fresh_movies['budget']
fresh_movies.sort_values(by="profit", ascending=False, inplace=True)
top10 = top_10_profiting_movies = fresh_movies.nlargest(10, 'profit')
top10

# Write your code for extracting the top 250 movies as per the IMDb score here. Make sure that you store it in a new dataframe 
# and name that dataframe as 'IMDb_Top_250'

top_movies = fresh_movies.sort_values(by='imdb_score', ascending=False)
IMDb_Top_250 = top_movies.head(250)
IMDb_Top_250 
Top_Foreign_Lang_Film = IMDb_Top_250[IMDb_Top_250['language'] != 'English']
Top_Foreign_Lang_Film
# Write your code for extracting the top 10 directors here
top_directors = fresh_movies.groupby('director_name')['imdb_score'].mean()

top10director = top_directors.sort_values(ascending=False).head(10).reset_index()
top10director.columns = ['director_name', 'mean_imdb_score']
top10director
# Write your code for extracting the first two genres of each movie here
fresh_movies['first_two_genres'] = fresh_movies['genres'].apply(lambda x: x.split(',')[:2] if isinstance(x, str) else [])
PopGenre = fresh_movies.sort_values(by='gross', ascending=False).head(5)
PopGenre
# Write your code for creating three new dataframes here

Meryl_Streep = fresh_movies[fresh_movies['actor_1_name'] == 'Meryl Streep']
Leo_Caprio = fresh_movies[fresh_movies['actor_1_name'] == 'Leonardo DiCaprio']
Brad_Pitt = fresh_movies[fresh_movies['actor_1_name'] == 'Brad Pitt']
# Write your code for combining the three dataframes here

combined_actors = pd.concat([Meryl_Streep, Leo_Caprio, Brad_Pitt], ignore_index=True)
# Write your code for grouping the combined dataframe here
Combined = pd.concat([Meryl_Streep, Leo_Caprio, Brad_Pitt], ignore_index=True)
# Write the code for finding the mean of critic reviews and audience reviews here
actor_reviews_mean = fresh_movies.groupby('actor_1_name')[['num_critic_for_reviews', 'num_user_for_reviews']].mean()
actor_reviews_mean['overall_mean'] = actor_reviews_mean.mean(axis=1)
print(highest_mean_actors.head(10))














